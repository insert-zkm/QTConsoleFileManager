@startuml
skinparam classAttributeIconSize 0
left to right direction

class QFileInfo {}
class QObject {}

class Console <<Singleton>> {
    - Q_OBJECT
    - Console()
    - ~Console()

    + get_instance() : Console&
    + print(QString) : void

    -- slots --
    + printFileState(FileState, File) : void
}

class Logger <<Singleton>> {
    - Q_OBJECT
    # m_file : QFile
    -- methods --
    - Logger()
    - ~Logger()

    + get_instance() : Logger&
    + log(QString) : void

    -- slots --
    +log_file_state(FileState, File) : void
}

class File {
    -- fields --
    # m_old_size : qint
    # m_old_existance : bool

    -- methods --
    + File()
    + File(QString)
    + update_and_get_state() : FileState
    + operator==(File) const : bool
}

class FileTracker <<Singleton>> {
    - Q_OBJECT
    -- fields --
    # m_files : QVector<Files>
    # timer_id : int
    # console : Console

    -- methods --
    - FileTracker()
    - ~FileTracker()

    + track_file(QString) : void
    + untrack_file(QString) : void
    + start_tracking(int) const : void
    + stop_tracking() const : void
    + show_tacking_files() const : void

    + timerEvent(QTimerEvent*) : void

    + check_files() : void

    -- signals --
    + updated(FileState, File) const : void
}

enum State {
    STABLE,
    RESIZED,
    DELETED,
    CREATED,
    RESTORED
}

struct FileState {
    + state : State
    + updated_time : QDateTime
}

FileTracker "0..1" *-- "*" File

Logger <.. File
Logger <.. FileState

Console <.. File
Console <.. FileState

FileState *-left- State
File <.. FileState

File <|-- QFileInfo
FileTracker <|-left- QObject
Console <|-- QObject
Logger <|-- QObject
@enduml
